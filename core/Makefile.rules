PREFIX:=arm-none-eabi-
CC:=$(PREFIX)gcc
OBJCOPY:=$(PREFIX)objcopy
OBJDUMP:=$(PREFIX)objdump
GDB:=$(PREFIX)gdb

CORE:=../core

SYSTEM:=$(CORE)/system
LIB:=$(CORE)/lib
DEVICE:=$(CORE)/arch/$(ARCH)
SOURCES:=$(SYSTEM)/src/isr.c \
         $(SYSTEM)/src/stdlib.c \
         $(LIB)/printf/tfp_printf.c \
         $(DEVICE)/src/system.c \
         $(APP_SRC)

DEBUG_HOST:=localhost
OPT:=-Os
DEBUG:=-g3 -DNDEBUG
WARNING:=-Wall -Werror
CPU_LOWER:=$(shell tr '[:upper:]' '[:lower:]' <<< $(CPU))
ARCH_LOWER:=$(shell tr '[:upper:]' '[:lower:]' <<< $(ARCH))

FLAGS_CM3:=-mcpu=cortex-m3 -mthumb

LDFLAGS:=$(FLAGS_CM3) \
        -L$(CORE)/linker \
        -T$(CPU).ld \
        -nostartfiles \
        -nostdlib \
        -Xlinker --gc-sections \
        -Xlinker -M \
        -Xlinker -Map=$(PROJECT).map

CFLAGS_PRE:=\
        $(OPT) \
        $(DEBUG) \
        $(WARNING) \
        -D$(ARCH) \
        -D$(CPU) \
        $(APP_CFLAGS) \
        -I$(CORE) \
        -I$(CORE)/cmsis/inc \
        -I$(SYSTEM)/inc \
        -I$(DEVICE)/inc \
        -I$(LIB)/printf \
        -ffunction-sections \
        -fdata-sections \
        -fno-common

CFLAGS:=$(FLAGS_CM3) $(CFLAGS_PRE)

OBJS:=$(SOURCES:.c=.o)

.PHONY: debug gdb gdbtui flash ctags source.c.tags

all: $(PROJECT).bin

$(PROJECT).elf: $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $^
	$(OBJDUMP) -d $@ > $(PROJECT).asm

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) $< -O binary $@

gdb: gdb.script
	$(GDB) -x $<

gdbtui: gdb.script
	$(GDB)tui -x $<

ctags: source.c.tags

source.c.tags: $(SOURCES)
	CFLAGS="$(CFLAGS_PRE)" geany -g $@ $^

gdb.script: $(PROJECT).elf
	echo -e "\
target remote $(DEBUG_HOST)\n\
monitor endian little\n\
monitor halt\n\
monitor speed 1000\n\
monitor flash device = $(CPU)\n\
load $<\n\
file $<\n\
monitor reset\n\
b main_entry\n\
b default_handler\n\
" > $@

flash: gdb.flash
	$(GDB) -x $<

gdb.flash: $(PROJECT).elf
	echo -e "\
target remote $(DEBUG_HOST)\n\
monitor endian little\n\
monitor halt\n\
monitor speed 1000\n\
monitor flash device = $(CPU)\n\
load $<\n\
monitor reset\n\
quit\n\
" > $@

clean:
	rm -f $(PROJECT).map $(PROJECT).elf $(PROJECT).bin $(PROJECT).asm gdb.script gdb.flash source.c.tags
	find . $(CORE) -iname '*.o' -exec rm -f \{\} \;
