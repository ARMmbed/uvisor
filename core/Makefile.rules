################################################################
#
#  This confidential and  proprietary  software may be used only
#  as authorised  by  a licensing  agreement  from  ARM  Limited
#
#             (C) COPYRIGHT 2013-2014 ARM Limited
#                    ALL RIGHTS RESERVED
#
#   The entire notice above must be reproduced on all authorised
#   copies and copies  may only be made to the  extent permitted
#   by a licensing agreement from ARM Limited.
#
################################################################
PREFIX:=arm-none-eabi-
CC:=$(PREFIX)gcc
CXX:=$(PREFIX)g++
OBJCOPY:=$(PREFIX)objcopy
OBJDUMP:=$(PREFIX)objdump
GDB:=$(PREFIX)gdb
JLINK:=$(SEGGER)JLinkExe
JLINK_SERVER:=$(SEGGER)JLinkGDBServer
JLINK_VIEWER:=$(SEGGER)JLinkSWOViewer
JLINK_VIEWER_MASK:=0x7
JLINK_PARAM:=-Device $(CPU) -if SWD
AUXHFRCO_FREQ:=0
JLINK_SWO_PARAM:=

CORE:=../../core

SYSTEM:=$(CORE)/system
LIB:=$(CORE)/lib
SYSLIBS:=-lgcc -lc -lnosys
DEVICE:=$(CORE)/arch/$(ARCH)
SOURCES:=$(SYSTEM)/src/isr.c \
         $(SYSTEM)/src/stdlib.c \
         $(LIB)/printf/tfp_printf.c \
         $(DEVICE)/src/system.c \
         $(APP_SRC)

DEBUG_HOST:=localhost:2331
OPT:=-Os -DNDEBUG
DEBUG:=-g3
WARNING:=-Wall -Werror
CPU_LOWER:=$(shell tr '[:upper:]' '[:lower:]' <<< $(CPU))
ARCH_LOWER:=$(shell tr '[:upper:]' '[:lower:]' <<< $(ARCH))
FLASH_OFFSET:=0

# determine repository version
PROGRAM_VERSION:=$(shell git describe --tags --abbrev=4 --dirty 2>/dev/null | sed s/^v//)
ifeq ("$(PROGRAM_VERSION)","")
         PROGRAM_VERSION:='unknown'
endif

# read UVISOR_FLASH_SIZE from uVisor config file
ifeq ("$(wildcard  $(CORE)/uvisor-config.h)","")
	UVISOR_FLASH_SIZE:=0
else
	UVISOR_FLASH_SIZE:=$(shell grep UVISOR_FLASH_SIZE $(CORE)/uvisor-config.h | sed -E 's/^.* (0x[0-9A-Fa-f]+).*$\/\1/')
endif

MEM_CONFIG:=$(CORE)/linker/$(CPU).h
FLAGS_CM3:=-mcpu=cortex-m3 -mthumb

LDFLAGS:=$(FLAGS_CM3) \
        -T$(PROJECT).linker \
        -nostartfiles \
        -nostdlib \
        -Xlinker --gc-sections \
        -Xlinker -M \
        -Xlinker -Map=$(PROJECT).map

CFLAGS_PRE:=\
        $(OPT) \
        $(DEBUG) \
        $(WARNING) \
        -D$(ARCH) \
        -D$(CPU) \
        -DPROGRAM_VERSION=\"$(PROGRAM_VERSION)\" \
        -DCPU=$(CPU) \
        $(APP_CFLAGS) \
        -include $(MEM_CONFIG) \
        -I$(CORE) \
        -I$(CORE)/cmsis/inc \
        -I$(SYSTEM)/inc \
        -I$(DEVICE)/inc \
        -I$(LIB)/printf \
        -ffunction-sections \
        -fdata-sections \
        -fno-common

CFLAGS:=$(FLAGS_CM3) $(CFLAGS_PRE)
CPPFLAGS:=$(CFLAGS) -fno-exceptions

OBJS:=$(SOURCES:.cpp=.o)
OBJS:=$(OBJS:.c=.o)

.PHONY: debug gdb gdbtui flash erase reset ctags source.c.tags swo

include $(CORE)/Makefile.scripts

all: $(PROJECT).bin

$(PROJECT).elf: $(OBJS) $(PROJECT).linker
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(SYSLIBS)
	$(OBJDUMP) -d $@ > $(PROJECT).asm

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) $< -O binary $@

$(PROJECT).linker: $(MEM_CONFIG) $(CORE)/linker/default.h
	$(CPP) -w -P -I$(CORE) $(APP_CFLAGS) -D$(CPU) -D$(ARCH) -include $^ -o $@

swo:
	$(JLINK_VIEWER) $(JLINK_PARAM) $(APP_JLINK_PARAM) -itmmask $(JLINK_VIEWER_MASK) $(JLINK_SWO_PARAM)

gdbserver:
	$(JLINK_SERVER) JLinkGDBServer $(JLINK_PARAM) $(APP_JLINK_PARAM)

gdb: gdb.script
	$(GDB) -x $<

gdbtui: gdb.script
	$(GDB)tui -x $<

ctags: source.c.tags

source.c.tags: $(SOURCES)
	CFLAGS="$(CFLAGS_PRE)" geany -g $@ $^

gdb.script: $(PROJECT).elf
	@echo "$$__SCRIPT_GDB" > $@

flash: $(PROJECT).bin
	@echo "$$__SCRIPT_FLASH" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

erase:
	@echo "$$__SCRIPT_ERASE" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

reset:
	@echo "$$__SCRIPT_RESET" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

clean:
	rm -f $(PROJECT).map $(PROJECT).elf $(PROJECT).bin $(PROJECT).asm  $(PROJECT).linker gdb.script source.c.tags JLink.log $(APP_CLEAN)
	find . $(CORE) -iname '*.o' -exec rm -f \{\} \;
