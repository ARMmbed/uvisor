###########################################################################
#
#  Copyright (c) 2013-2015, ARM Limited, All Rights Reserved
#  SPDX-License-Identifier: Apache-2.0
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
###########################################################################
PREFIX:=arm-none-eabi-
CC:=$(PREFIX)gcc
CXX:=$(PREFIX)g++
OBJCOPY:=$(PREFIX)objcopy
OBJDUMP:=$(PREFIX)objdump
GDB:=$(PREFIX)gdb
JLINK:=$(SEGGER)JLinkExe
JLINK_SERVER:=$(SEGGER)JLinkGDBServer
JLINK_VIEWER:=$(SEGGER)JLinkSWOViewer
JLINK_VIEWER_MASK:=0x7
AUXHFRCO_FREQ:=0
JLINK_SWO_PARAM:=

ROOT_DIR:=../..
CORE_DIR:=$(ROOT_DIR)/core

SYSLIBS:=-lgcc -lc -lnosys

# system paths
CMSIS_DIR:=$(CORE_DIR)/cmsis
SYSTEM_DIR:=$(CORE_DIR)/system
MBED_DIR:=$(CORE_DIR)/mbed
DEBUG_DIR:=$(CORE_DIR)/debug
LIB_DIR:=$(CORE_DIR)/lib
DEVICE_DIR:=$(CORE_DIR)/arch/$(ARCH)

# mbed release paths
RELEASE_DIR:=$(ROOT_DIR)/release
RELEASE_SRC:=$(RELEASE_DIR)/source
RELEASE_SRC_HW:=$(RELEASE_SRC)/$(CPU)
RELEASE_INC:=$(RELEASE_DIR)/uvisor-lib
RELEASE_ASM:=$(RELEASE_SRC_HW)/uvisor-GCC_ARM.s
RELEASE_BIN_NAME:=uvisor-$(CPU).box
RELEASE_BIN:=$(RELEASE_SRC_HW)/$(RELEASE_BIN_NAME)
RELEASE_VER:=$(RELEASE_SRC_HW)/version.txt

# make ARMv7-M MPU driver the default
ifeq ("$(ARCH_MPU)","")
ARCH_MPU:=ARMv7M
endif

# ARMv7-M MPU driver
ifeq ("$(ARCH_MPU)","ARMv7M")
MPU_SRC:=\
         $(SYSTEM_DIR)/src/mpu/vmpu_armv7m.c \
         $(SYSTEM_DIR)/src/mpu/vmpu_armv7m_debug.c
endif

# Freescale K64 MPU driver
ifeq ("$(ARCH_MPU)","MK64F")
MPU_SRC:=\
         $(SYSTEM_DIR)/src/mpu/vmpu_freescale_k64.c \
         $(SYSTEM_DIR)/src/mpu/vmpu_freescale_k64_debug.c \
         $(SYSTEM_DIR)/src/mpu/vmpu_freescale_k64_aips.c \
         $(SYSTEM_DIR)/src/mpu/vmpu_freescale_k64_mem.c
endif

SOURCES:=\
         $(SYSTEM_DIR)/src/benchmark.c \
         $(SYSTEM_DIR)/src/halt.c \
         $(SYSTEM_DIR)/src/main.c \
         $(SYSTEM_DIR)/src/stdlib.c \
         $(SYSTEM_DIR)/src/svc.c \
         $(SYSTEM_DIR)/src/svc_cx.c \
         $(SYSTEM_DIR)/src/unvic.c \
         $(DEBUG_DIR)/src/debug.c \
         $(DEBUG_DIR)/src/memory_map.c \
         $(LIB_DIR)/printf/tfp_printf.c \
         $(DEVICE_DIR)/src/system.c \
         $(SYSTEM_DIR)/src/mpu/vmpu.c \
         $(MPU_SRC) \
         $(APP_SRC)

DEBUG_HOST:=localhost:2331
OPT:=-Os -DNDEBUG
DEBUG:=-g3
WARNING:=-Wall -Werror
CPU_LOWER:=$(shell echo $(CPU) | tr '[:upper:]' '[:lower:]')
ARCH_LOWER:=$(shell echo $(ARCH) | tr '[:upper:]' '[:lower:]')
FLASH_OFFSET:=0

# determine repository version
PROGRAM_VERSION:=$(shell git describe --tags --abbrev=4 --dirty 2>/dev/null | sed s/^v//)
ifeq ("$(PROGRAM_VERSION)","")
         PROGRAM_VERSION:='unknown'
endif

# allow overriding of JLink debug CPU from application Makefile
ifeq ("$(CPU_JLINK)","")
	DEBUG_CPU:=$(CPU)
else
	DEBUG_CPU:=$(CPU_JLINK)
endif
JLINK_PARAM:=-Device $(DEBUG_CPU) -if SWD

# read UVISOR_FLASH_SIZE from uVisor config file
ifeq ("$(wildcard  $(CORE_DIR)/uvisor-config.h)","")
	UVISOR_FLASH_SIZE:=0
else
	UVISOR_FLASH_SIZE:=$(shell grep UVISOR_FLASH_SIZE $(CORE_DIR)/uvisor-config.h | sed -E 's/^.* (0x[0-9A-Fa-f]+).*$\/\1/')
endif

MEM_CONFIG:=$(CORE_DIR)/linker/$(CPU).h
FLAGS_CM4:=-mcpu=cortex-m4 -march=armv7e-m -mthumb

LDFLAGS:=\
        $(FLAGS_CM4) \
        -T$(PROJECT).linker \
        -nostartfiles \
        -nostdlib \
        -Xlinker --gc-sections \
        -Xlinker -M \
        -Xlinker -Map=$(PROJECT).map

CFLAGS_PRE:=\
        $(OPT) \
        $(DEBUG) \
        $(WARNING) \
        -DARCH_$(ARCH) \
        -DARCH_MPU_$(ARCH_MPU) \
        -D$(CPU) \
        -DPROGRAM_VERSION=\"$(PROGRAM_VERSION)\" \
        -DCPU=$(CPU) \
        $(APP_CFLAGS) \
        -include $(MEM_CONFIG) \
        -I$(CORE_DIR) \
        -I$(CMSIS_DIR)/inc \
        -I$(SYSTEM_DIR)/inc \
        -I$(SYSTEM_DIR)/inc/mpu \
        -I$(DEVICE_DIR)/inc \
        -I$(DEBUG_DIR)/inc \
        -I$(LIB_DIR)/printf \
        -ffunction-sections \
        -fdata-sections

CFLAGS:=$(FLAGS_CM4) $(CFLAGS_PRE)
CPPFLAGS:=-fno-exceptions

OBJS:=$(SOURCES:.cpp=.o)
OBJS:=$(OBJS:.c=.o)

.PHONY: debug gdb gdbtui flash erase reset ctags source.c.tags swo

include $(CORE_DIR)/Makefile.scripts

all: $(PROJECT).bin

$(PROJECT).elf: $(OBJS) $(PROJECT).linker
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(SYSLIBS)
	$(OBJDUMP) -d $@ > $(PROJECT).asm

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) $< -O binary $@

$(PROJECT).linker: $(MEM_CONFIG) $(CORE_DIR)/linker/default.h
	$(CPP) -w -P -I$(CORE_DIR) $(APP_CFLAGS) -D$(CPU) -DARCH_$(ARCH) -include $^ -o $@

release: $(MBED_DIR)/source/uvisor-gcc-input.S $(PROJECT).bin
	rm  -f $(RELEASE_INC)/*.h
	rm  -f $(RELEASE_SRC)/*.cpp
	rm -rf $(RELEASE_SRC_HW)
	mkdir -p $(RELEASE_SRC_HW)
	echo "$(PROGRAM_VERSION)" > $(RELEASE_VER)
	cp $(PROJECT).bin $(RELEASE_BIN)
	cp $(MBED_DIR)/uvisor-lib/*.h $(RELEASE_INC)/
	cp $(MBED_DIR)/source/*.cpp   $(RELEASE_SRC)/
	find ../.. -name "*_exports.h" -not -path "$(RELEASE_DIR)/*"\
	     -exec cp {} $(RELEASE_INC)/ \;
	cp -f $(MBED_DIR)/source/uvisor-gcc-header.S $(RELEASE_ASM)
	$(CPP) -w -P -I$(CORE_DIR) $(APP_CFLAGS) -DP-D$(CPU) -DARCH_$(ARCH)\
	       -DRELEASE_BIN=\"$(RELEASE_BIN_NAME)\" $< >> $(RELEASE_ASM)

swo:
	$(JLINK_VIEWER) $(JLINK_PARAM) $(APP_JLINK_PARAM) -itmmask $(JLINK_VIEWER_MASK) $(JLINK_SWO_PARAM)

gdbserver:
	$(JLINK_SERVER) JLinkGDBServer $(JLINK_PARAM) $(APP_JLINK_PARAM)

gdb: gdb.script
	$(GDB) -x $<

gdbtui: gdb.script
	$(GDB) -tui -x $<

ctags: source.c.tags

source.c.tags: $(SOURCES)
	CFLAGS="$(CFLAGS_PRE)" geany -g $@ $^

gdb.script: $(PROJECT).elf
	@echo "$$__SCRIPT_GDB" > $@

flash: $(PROJECT).bin
	@echo "$$__SCRIPT_FLASH" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

erase:
	@echo "$$__SCRIPT_ERASE" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

reset:
	@echo "$$__SCRIPT_RESET" | $(JLINK) $(JLINK_PARAM) $(APP_JLINK_PARAM)

clean:
	rm -f $(PROJECT).map $(PROJECT).elf $(PROJECT).bin $(PROJECT).asm\
	      $(PROJECT).linker gdb.script source.c.tags JLink.log\
	      $(RELEASE_ASM) $(RELEASE_BIN) $(RELEASE_VER)
	      $(APP_CLEAN)
	find . $(CORE_DIR) -iname '*.o' -exec rm -f \{\} \;
